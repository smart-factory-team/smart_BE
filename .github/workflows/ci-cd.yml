name: Smart BE Spring Boot MSA CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'usermanagement/**'
      - 'report/**'
      - 'approvalmanagement/**'
      - 'pressfaultdetection/**'
      - 'chatbot/**'
      - 'assemblyprocessmonitoring/**'
      - 'weldingprocessmonitoring/**'
      - 'gateway/**'
  push:
    branches: [ main ]
    paths:
      - 'usermanagement/**'
      - 'report/**'
      - 'approvalmanagement/**'
      - 'pressfaultdetection/**'
      - 'chatbot/**'
      - 'assemblyprocessmonitoring/**'
      - 'weldingprocessmonitoring/**'
      - 'gateway/**'

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read
  packages: write
  id-token: write

env:
  REGISTRY: 23acr.azurecr.io
  AKS_CLUSTER_NAME: 23-aks
  AKS_RESOURCE_GROUP: 23-rsrc
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'
  NVD_API_KEY: ${{ secrets.NVD_API_KEY }}


jobs:
  # Î≥ÄÍ≤ΩÎêú Spring Boot ÏÑúÎπÑÏä§ Í∞êÏßÄ
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      detection_method: ${{ steps.changes.outputs.detection_method }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed Spring Boot services
        id: changes
        run: |
          CHANGED_SERVICES=""
          DETECTION_METHOD=""
          
          # Spring Boot ÏÑúÎπÑÏä§ Î™©Î°ù Ï†ïÏùò
          SPRING_SERVICES=("usermanagement" "report" "approvalmanagement" "pressfaultdetection" "chatbot" "assemblyprocessmonitoring" "weldingprocessmonitoring" "gateway")
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # PR Ï†úÎ™©ÏóêÏÑú ÏÑúÎπÑÏä§Î™Ö Ï∂îÏ∂ú
            PR_TITLE="${{ github.event.pull_request.title }}"
            SERVICE_NAME=$(echo "$PR_TITLE" | sed -n 's/^[^/]*\/[0-9]\+\/\([^:]*\):.*/\1/p' | sed 's/[[:space:]]*$//' | tr -cd '[:alnum:]-')
          
            echo "üîç PR Title: $PR_TITLE"
            echo "üîç Parsed Service: '$SERVICE_NAME'"
          
            # ÏÑúÎπÑÏä§ ÎîîÎ†âÌÜ†Î¶¨ ÌôïÏù∏ (Spring Boot ÏÑúÎπÑÏä§Îßå)
            for svc in "${SPRING_SERVICES[@]}"; do
              if [ "$SERVICE_NAME" = "$svc" ] && [ -d "$svc" ]; then
                echo "‚úÖ Spring Boot service found: $svc"
                CHANGED_SERVICES="$svc"
                DETECTION_METHOD="pr_title"
                break
              fi
            done
          fi
          
          # PR Ï†úÎ™©ÏóêÏÑú Í∞êÏßÄ Ïã§Ìå®ÌïòÍ±∞ÎÇò Push Ïù¥Î≤§Ìä∏Ïù∏ Í≤ΩÏö∞ git diff ÏÇ¨Ïö©
          if [ -z "$CHANGED_SERVICES" ]; then
            echo "üîç Using git diff to detect Spring Boot service changes..."
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              BASE_SHA="${{ github.event.pull_request.base.sha }}"
              HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            else
              BASE_SHA="${{ github.event.before }}"
              HEAD_SHA="${{ github.sha }}"
            fi
          
            # Î≥ÄÍ≤ΩÎêú Spring Boot ÏÑúÎπÑÏä§Îßå ÌïÑÌÑ∞ÎßÅ
            ALL_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | cut -d'/' -f1 | sort -u)
          
            for changed_dir in $ALL_CHANGED; do
              for svc in "${SPRING_SERVICES[@]}"; do
                if [ "$changed_dir" = "$svc" ]; then
                  CHANGED_SERVICES="$CHANGED_SERVICES $svc"
                fi
              done
            done
          
            CHANGED_SERVICES=$(echo $CHANGED_SERVICES | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/ $//')
            DETECTION_METHOD="git_diff"
          
            if [ -z "$CHANGED_SERVICES" ]; then
              echo "üì≠ No Spring Boot services changed"
            else
              echo "üì¶ Spring Boot services changed: $CHANGED_SERVICES"
            fi
          fi
          
          echo "services=$CHANGED_SERVICES" >> $GITHUB_OUTPUT
          echo "detection_method=$DETECTION_METHOD" >> $GITHUB_OUTPUT

      - name: Set matrix for changed services
        id: set-matrix
        run: |
          SERVICES="${{ steps.changes.outputs.services }}"
          if [ -z "$SERVICES" ]; then
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            # JSON Î∞∞Ïó¥ ÌòïÌÉúÎ°ú Î≥ÄÌôò
            MATRIX_JSON=$(echo $SERVICES | tr ' ' '\n' | jq -R . | jq -s -c .)
            echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          fi
          
          echo "üéØ Final matrix: $MATRIX_JSON"

  # Í∞Å Spring Boot ÏÑúÎπÑÏä§Î≥Ñ ÌÖåÏä§Ìä∏ Î∞è ÎπåÎìú
  test-and-build:
    needs: detect-changes
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.services != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependenQcies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Check if service directory exists
        id: check-service
        run: |
          if [ -d "${{ matrix.service }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Service directory found: ${{ matrix.service }}"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Service directory ${{ matrix.service }} does not exist"
          fi

      - name: Run Maven tests - ${{ matrix.service }}
        id: test
        if: steps.check-service.outputs.exists == 'true'
        working-directory: ${{ matrix.service }}
        run: |
          echo "üß™ Running tests for ${{ matrix.service }}..."
          
          # Maven ÌÖåÏä§Ìä∏ Ïã§Ìñâ
          mvn clean test -B -Dspring.profiles.active=test \
            -Dmaven.test.failure.ignore=true \
            -Dsurefire.useFile=false \
            -Dspring.datasource.url=jdbc:h2:mem:testdb \
            -Dspring.datasource.driver-class-name=org.h2.Driver \
            -Dspring.jpa.hibernate.ddl-auto=create-drop
          
          # ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÌååÏã±
          if [ -f target/surefire-reports/TEST-*.xml ]; then
            TOTAL=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'tests="[^"]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}' || echo "0")
            FAILURES=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'failures="[^"]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}' || echo "0")
            ERRORS=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'errors="[^"]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}' || echo "0")
            SKIPPED=$(find target/surefire-reports -name "TEST-*.xml" -exec grep -h 'skipped="[^"]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}' || echo "0")
            PASSED=$((TOTAL - FAILURES - ERRORS))
          else
            TOTAL=0; PASSED=0; FAILURES=0; ERRORS=0; SKIPPED=0
          fi
          
          echo "total_tests=$TOTAL" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED" >> $GITHUB_OUTPUT
          echo "failed_tests=$((FAILURES + ERRORS))" >> $GITHUB_OUTPUT
          echo "skipped_tests=$SKIPPED" >> $GITHUB_OUTPUT
          echo "service_name=${{ matrix.service }}" >> $GITHUB_OUTPUT
          
          echo "üìä Test Results: Total=$TOTAL, Passed=$PASSED, Failed=$((FAILURES + ERRORS)), Skipped=$SKIPPED"

      - name: Run Maven compile - ${{ matrix.service }}
        id: compile
        if: steps.check-service.outputs.exists == 'true'
        working-directory: ${{ matrix.service }}
        run: |
          echo "üî® Compiling ${{ matrix.service }}..."
          mvn clean compile -B -DskipTests
          
          if [ $? -eq 0 ]; then
            echo "compile_status=success" >> $GITHUB_OUTPUT
          else
            echo "compile_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Run Maven package (without tests) - ${{ matrix.service }}
        id: package
        if: steps.check-service.outputs.exists == 'true' && steps.compile.outputs.compile_status == 'success'
        working-directory: ${{ matrix.service }}
        run: |
          echo "üì¶ Packaging ${{ matrix.service }}..."
          mvn package -B -DskipTests
          
          if [ $? -eq 0 ]; then
            echo "package_status=success" >> $GITHUB_OUTPUT
            # JAR ÌååÏùº Ï†ïÎ≥¥
            JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)
            if [ -f "$JAR_FILE" ]; then
              JAR_SIZE=$(du -h "$JAR_FILE" | cut -f1)
              echo "jar_file=$JAR_FILE" >> $GITHUB_OUTPUT
              echo "jar_size=$JAR_SIZE" >> $GITHUB_OUTPUT
              echo "üì¶ Generated JAR: $JAR_FILE ($JAR_SIZE)"
            fi
          else
            echo "package_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Upload test results - ${{ matrix.service }}
        if: steps.check-service.outputs.exists == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: |
            ${{ matrix.service }}/target/surefire-reports/
            ${{ matrix.service }}/target/*.jar
          retention-days: 7

  # Í∞Å Spring Boot ÏÑúÎπÑÏä§Î≥Ñ Î≥¥Ïïà Ïä§Ï∫î
  security-scan:
    needs: detect-changes
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.services != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run OWASP Dependency Check - ${{ matrix.service }}
        id: security
        working-directory: ${{ matrix.service }}
        continue-on-error: true
        run: |
          echo "üîí Running security scan for ${{ matrix.service }}..."
          
          # OWASP Dependency Check ÌîåÎü¨Í∑∏Ïù∏ Ïã§Ìñâ
          mvn org.owasp:dependency-check-maven:check \
            -Dnvd.api.key=${NVD_API_KEY} \
            -DfailBuildOnCVSS=7 \
            -Dformat=JSON || true
          
          # Î≥¥Ïïà Ïä§Ï∫î Í≤∞Í≥º ÌååÏã±
          if [ -f "target/dependency-check-report.json" ]; then
            HIGH=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="HIGH")] | length' target/dependency-check-report.json || echo "0")
            MEDIUM=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="MEDIUM")] | length' target/dependency-check-report.json || echo "0")
            LOW=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="LOW")] | length' target/dependency-check-report.json || echo "0")
            TOTAL=$((HIGH + MEDIUM + LOW))
          else
            HIGH=0; MEDIUM=0; LOW=0; TOTAL=0
          fi

          echo "high_issues=$HIGH" >> $GITHUB_OUTPUT
          echo "medium_issues=$MEDIUM" >> $GITHUB_OUTPUT
          echo "low_issues=$LOW" >> $GITHUB_OUTPUT
          echo "total_issues=$TOTAL" >> $GITHUB_OUTPUT
          echo "service_name=${{ matrix.service }}" >> $GITHUB_OUTPUT
          
          echo "üîí Security Results: High=$HIGH, Medium=$MEDIUM, Low=$LOW"

      - name: Upload security scan results - ${{ matrix.service }}
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-${{ matrix.service }}
          path: |
            ${{ matrix.service }}/target/dependency-check-report.*
          retention-days: 7

  # Í≤∞Í≥º ÌÜµÌï©
  aggregate-results:
    needs: [ detect-changes, test-and-build, security-scan ]
    if: github.event_name == 'pull_request' && always() && needs.detect-changes.outputs.services != ''
    runs-on: ubuntu-latest
    outputs:
      total_tests: ${{ steps.aggregate.outputs.total_tests }}
      passed_tests: ${{ steps.aggregate.outputs.passed_tests }}
      failed_tests: ${{ steps.aggregate.outputs.failed_tests }}
      skipped_tests: ${{ steps.aggregate.outputs.skipped_tests }}
      compile_errors: ${{ steps.aggregate.outputs.compile_errors }}
      package_errors: ${{ steps.aggregate.outputs.package_errors }}
      high_issues: ${{ steps.aggregate.outputs.high_issues }}
      medium_issues: ${{ steps.aggregate.outputs.medium_issues }}
      low_issues: ${{ steps.aggregate.outputs.low_issues }}
      total_issues: ${{ steps.aggregate.outputs.total_issues }}
      failed_services: ${{ steps.aggregate.outputs.failed_services }}

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Aggregate results
        id: aggregate
        run: |
          # Î™®Îì† Í≤∞Í≥º ÌÜµÌï©
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0
          SKIPPED_TESTS=0
          COMPILE_ERRORS=0
          PACKAGE_ERRORS=0
          TOTAL_HIGH=0
          TOTAL_MEDIUM=0
          TOTAL_LOW=0
          FAILED_SERVICES=""

          # Í∞Å ÏÑúÎπÑÏä§Î≥Ñ Í≤∞Í≥º ÏßëÍ≥Ñ
          for dir in test-results-*; do
            if [ -d "$dir" ]; then
              SERVICE_NAME=$(echo "$dir" | sed 's/test-results-//')
          
              # ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÌååÏã±
              if find "$dir" -name "TEST-*.xml" -type f | head -1 | xargs test -f; then
                T=$(find "$dir" -name "TEST-*.xml" -exec grep -h 'tests="[^"]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}' || echo "0")
                F=$(find "$dir" -name "TEST-*.xml" -exec grep -h 'failures="[^"]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}' || echo "0")
                E=$(find "$dir" -name "TEST-*.xml" -exec grep -h 'errors="[^"]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}' || echo "0")
                S=$(find "$dir" -name "TEST-*.xml" -exec grep -h 'skipped="[^"]*"' {} \; | grep -o '[0-9]*' | awk '{s+=$1} END {print s}' || echo "0")

                TOTAL_TESTS=$((TOTAL_TESTS + T))
                FAILED_TESTS=$((FAILED_TESTS + F + E))
                SKIPPED_TESTS=$((SKIPPED_TESTS + S))
                PASSED_TESTS=$((PASSED_TESTS + T - F - E))

                # Ïã§Ìå®Ìïú ÏÑúÎπÑÏä§ Ï∂îÏ†Å
                if [ $((F + E)) -gt 0 ]; then
                  FAILED_SERVICES="$FAILED_SERVICES,$SERVICE_NAME"
                fi
              fi
            fi
          done

          # Î≥¥Ïïà Ïä§Ï∫î Í≤∞Í≥º ÏßëÍ≥Ñ
          for dir in security-scan-*; do
            if [ -d "$dir" ] && [ -f "$dir/dependency-check-report.json" ]; then
              H=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="HIGH")] | length' "$dir/dependency-check-report.json" || echo "0")
              M=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="MEDIUM")] | length' "$dir/dependency-check-report.json" || echo "0")
              L=$(jq '[.dependencies[].vulnerabilities[]? | select(.severity=="LOW")] | length' "$dir/dependency-check-report.json" || echo "0")

              TOTAL_HIGH=$((TOTAL_HIGH + H))
              TOTAL_MEDIUM=$((TOTAL_MEDIUM + M))
              TOTAL_LOW=$((TOTAL_LOW + L))
            fi
          done

          # Outputs ÏÑ§Ï†ï
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "skipped_tests=$SKIPPED_TESTS" >> $GITHUB_OUTPUT
          echo "compile_errors=$COMPILE_ERRORS" >> $GITHUB_OUTPUT
          echo "package_errors=$PACKAGE_ERRORS" >> $GITHUB_OUTPUT
          echo "high_issues=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          echo "medium_issues=$TOTAL_MEDIUM" >> $GITHUB_OUTPUT
          echo "low_issues=$TOTAL_LOW" >> $GITHUB_OUTPUT
          echo "total_issues=$((TOTAL_HIGH + TOTAL_MEDIUM + TOTAL_LOW))" >> $GITHUB_OUTPUT
          echo "failed_services=${FAILED_SERVICES#,}" >> $GITHUB_OUTPUT

  # Í∞Å ÏÑúÎπÑÏä§Î≥Ñ Docker ÎπåÎìú Î∞è Ìë∏Ïãú (main Î∏åÎûúÏπòÎßå)
  build-and-push:
    needs: detect-changes
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.services != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build JAR file - ${{ matrix.service }}
        working-directory: ${{ matrix.service }}
        run: |
          echo "üî® Building JAR for ${{ matrix.service }}..."
          mvn clean package -B -DskipTests
          
          # JAR ÌååÏùº ÌôïÏù∏
          JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)
          if [ -f "$JAR_FILE" ]; then
            echo "‚úÖ JAR built successfully: $JAR_FILE"
          else
            echo "‚ùå JAR build failed"
            exit 1
          fi

      - name: Check if Dockerfile exists for ${{ matrix.service }}
        id: dockerfile-check
        run: |
          if [ -f "${{ matrix.service }}/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Dockerfile not found for ${{ matrix.service }}"
          fi

      - name: Login to Azure Container Registry
        if: steps.dockerfile-check.outputs.exists == 'true'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image - ${{ matrix.service }}
        if: steps.dockerfile-check.outputs.exists == 'true'
        working-directory: ${{ matrix.service }}
        run: |
          IMAGE_NAME="smart-be-${{ matrix.service }}"
          
          echo "üê≥ Building Docker image for ${{ matrix.service }}..."
          docker build -t ${{ env.REGISTRY }}/${IMAGE_NAME}:${{ github.sha }} .
          docker build -t ${{ env.REGISTRY }}/${IMAGE_NAME}:latest .
          
          echo "üì§ Pushing Docker image to ACR..."
          docker push ${{ env.REGISTRY }}/${IMAGE_NAME}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${IMAGE_NAME}:latest
          
          echo "‚úÖ Built and pushed image: ${{ env.REGISTRY }}/${IMAGE_NAME}:${{ github.sha }}"

  # Pull Request ÏûêÎèô Î¶¨Î∑∞
  auto-review:
    needs: [ detect-changes, aggregate-results ]
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.services != '' && always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: PR Code Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const changedServices = "${{ needs.detect-changes.outputs.services }}".split(' ').filter(s => s.trim());

            if (changedServices.length === 0) {
              console.log('No Spring Boot services detected, skipping review comment');
              return;
            }

            try {
              const detectionMethod = "${{ needs.detect-changes.outputs.detection_method }}";
              const prTitle = "${{ github.event.pull_request.title }}";

              // Í∞Å ÏûëÏóÖÏùò Í≤∞Í≥º ÏàòÏßë
              const testResult = "${{ needs.test-and-build.result }}";
              const securityResult = "${{ needs.security-scan.result }}";

              // ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÌååÏã±
              const testOutputs = {
                total: "${{ needs.aggregate-results.outputs.total_tests || '0' }}",
                passed: "${{ needs.aggregate-results.outputs.passed_tests || '0' }}",
                failed: "${{ needs.aggregate-results.outputs.failed_tests || '0' }}",
                skipped: "${{ needs.aggregate-results.outputs.skipped_tests || '0' }}",
                failedServices: "${{ needs.aggregate-results.outputs.failed_services || '' }}",
                compileErrors: "${{ needs.aggregate-results.outputs.compile_errors || '0' }}",
                packageErrors: "${{ needs.aggregate-results.outputs.package_errors || '0' }}"
              };

              // Î≥¥Ïïà Ïä§Ï∫î Í≤∞Í≥º
              const securityOutputs = {
                highIssues: "${{ needs.aggregate-results.outputs.high_issues || '0' }}",
                mediumIssues: "${{ needs.aggregate-results.outputs.medium_issues || '0' }}",
                lowIssues: "${{ needs.aggregate-results.outputs.low_issues || '0' }}",
                totalIssues: "${{ needs.aggregate-results.outputs.total_issues || '0' }}"
              };

              let reviewComment = "## ü§ñ Smart BE Spring Boot ÏûêÎèô ÏΩîÎìú Î¶¨Î∑∞\n\n";
              reviewComment += `### üì¶ Î≥ÄÍ≤ΩÎêú Spring Boot ÏÑúÎπÑÏä§ (${changedServices.length}Í∞ú):\n`;

              changedServices.forEach(service => {
                reviewComment += `- **${service}** ÏÑúÎπÑÏä§\n`;
              });

              // Í∞êÏßÄ Î∞©Î≤ïÏóê Îî∞Î•∏ Î©îÏãúÏßÄ
              if (detectionMethod === "pr_title") {
                reviewComment += "\nüéØ **PR Ï†úÎ™©ÏóêÏÑú ÏÑúÎπÑÏä§ ÏûêÎèô Í∞êÏßÄÎê®**\n";
                reviewComment += `- Ï†úÎ™©: \`${prTitle}\`\n`;
              } else if (detectionMethod === "git_diff") {
                reviewComment += "\nüîç **Git diffÎ•º ÌÜµÌï¥ ÏÑúÎπÑÏä§ Í∞êÏßÄÎê®**\n";
              }

              // Ï†ÑÏ≤¥ ÏÉÅÌÉú ÏöîÏïΩ
              reviewComment += "\n### üìä Ï†ÑÏ≤¥ Í≤ÄÏÇ¨ Í≤∞Í≥º:\n";
              const allPassed = testResult === 'success' && securityResult === 'success';

              if (allPassed) {
                reviewComment += "‚úÖ **Î™®Îì† Í≤ÄÏÇ¨ ÌÜµÍ≥º** - Î∞∞Ìè¨ Ï§ÄÎπÑ ÏôÑÎ£å!\n";
              } else {
                reviewComment += "‚ö†Ô∏è **ÏùºÎ∂Ä Í≤ÄÏÇ¨ÏóêÏÑú Î¨∏Ï†ú Î∞úÍ≤¨** - ÌôïÏù∏ ÌïÑÏöî\n";
              }

              // ÎπåÎìú & ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏÑπÏÖò
              reviewComment += "\n### üî® ÎπåÎìú & ÌÖåÏä§Ìä∏ Í≤∞Í≥º:\n";

              if (testResult === 'success') {
                reviewComment += "‚úÖ **ÎπåÎìú & ÌÖåÏä§Ìä∏ ÌÜµÍ≥º**\n";
              } else if (testResult === 'failure') {
                reviewComment += "‚ùå **ÎπåÎìú & ÌÖåÏä§Ìä∏ Ïã§Ìå®**\n";
              } else {
                reviewComment += "‚ö†Ô∏è **ÎπåÎìú & ÌÖåÏä§Ìä∏ ÏÉÅÌÉú Î∂àÎ™Ö**\n";
              }

              // ÌÖåÏä§Ìä∏ ÌÜµÍ≥Ñ
              if (testOutputs.total !== '0') {
                reviewComment += `- **Ï¥ù ÌÖåÏä§Ìä∏**: ${testOutputs.total}Í∞ú\n`;
                reviewComment += `- **ÏÑ±Í≥µ**: ${testOutputs.passed}Í∞ú ‚úÖ\n`;

                if (testOutputs.failed !== '0') {
                  reviewComment += `- **Ïã§Ìå®**: ${testOutputs.failed}Í∞ú ‚ùå\n`;
                }

                if (testOutputs.skipped !== '0') {
                  reviewComment += `- **Ïä§ÌÇµ**: ${testOutputs.skipped}Í∞ú ‚è≠Ô∏è\n`;
                }
              }

              // Ïã§Ìå®Ìïú ÏÑúÎπÑÏä§ ÏÉÅÏÑ∏ Ï†ïÎ≥¥
              if (testOutputs.failedServices) {
                reviewComment += "\n**üîç Î¨∏Ï†úÍ∞Ä ÏûàÎäî ÏÑúÎπÑÏä§:**\n";
                const failedServicesList = testOutputs.failedServices.split(',').filter(s => s.trim());
                failedServicesList.forEach(service => {
                  reviewComment += `- \`${service.trim()}\`\n`;
                });
              }

              // Î≥¥Ïïà Ïä§Ï∫î Í≤∞Í≥º ÏÑπÏÖò
              reviewComment += "\n### üîí Î≥¥Ïïà Ïä§Ï∫î Í≤∞Í≥º:\n";

              if (securityResult === 'success') {
                reviewComment += "‚úÖ **Î≥¥Ïïà Í≤ÄÏÇ¨ ÌÜµÍ≥º**\n";
              } else if (securityResult === 'failure') {
                reviewComment += "‚ùå **Î≥¥Ïïà Ïù¥Ïäà Î∞úÍ≤¨**\n";
              } else {
                reviewComment += "‚ö†Ô∏è **Î≥¥Ïïà Ïä§Ï∫î ÏÉÅÌÉú Î∂àÎ™Ö**\n";
              }

              if (securityOutputs.totalIssues !== '0') {
                reviewComment += `- **Ï¥ù Î≥¥Ïïà Ïù¥Ïäà**: ${securityOutputs.totalIssues}Í∞ú\n`;

                if (securityOutputs.highIssues !== '0') {
                  reviewComment += `  - üî¥ **High**: ${securityOutputs.highIssues}Í∞ú\n`;
                }
                if (securityOutputs.mediumIssues !== '0') {
                  reviewComment += `  - üü° **Medium**: ${securityOutputs.mediumIssues}Í∞ú\n`;
                }
                if (securityOutputs.lowIssues !== '0') {
                  reviewComment += `  - üü¢ **Low**: ${securityOutputs.lowIssues}Í∞ú\n`;
                }
              } else {
                reviewComment += "- Î≥¥Ïïà Ïù¥ÏäàÍ∞Ä Î∞úÍ≤¨ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§ ‚úÖ\n";
              }

              // Ï¢ÖÌï© Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏
              reviewComment += "\n### ‚úÖ Í≤ÄÏÇ¨ Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏:\n";
              reviewComment += testResult === 'success' ? 
                "- ‚úÖ ÎπåÎìú & ÌÖåÏä§Ìä∏ ÌÜµÍ≥º\n" : 
                "- ‚ùå ÎπåÎìú & ÌÖåÏä§Ìä∏ Ïã§Ìå®\n";
              reviewComment += testOutputs.compileErrors === '0' ? 
                "- ‚úÖ Ïª¥ÌååÏùº ÏÑ±Í≥µ\n" : 
                "- ‚ùå Ïª¥ÌååÏùº Ïò§Î•ò Î∞úÍ≤¨\n";
              reviewComment += securityResult === 'success' ? 
                "- ‚úÖ Î≥¥Ïïà Ïä§Ï∫î ÌÜµÍ≥º\n" : 
                "- ‚ùå Î≥¥Ïïà Ïù¥Ïäà Î∞úÍ≤¨\n";

              // Î∞∞Ìè¨ Ï†ïÎ≥¥
              reviewComment += "\n### üöÄ Î∞∞Ìè¨ Ï†ïÎ≥¥:\n";
              if (allPassed) {
                reviewComment += "- ‚úÖ **Î™®Îì† Í≤ÄÏÇ¨ ÌÜµÍ≥º** - Î∞∞Ìè¨ Ï§ÄÎπÑ ÏôÑÎ£å\n";
                reviewComment += "- üîÑ main Î∏åÎûúÏπò Î®∏ÏßÄ Ïãú ÏûêÎèô Î∞∞Ìè¨Îê©ÎãàÎã§\n";
                reviewComment += "- üèóÔ∏è Í∞Å Spring Boot ÏÑúÎπÑÏä§Îäî ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú ÎπåÎìú/Î∞∞Ìè¨Îê©ÎãàÎã§\n";
                reviewComment += "- üóÑÔ∏è ÏÑúÎπÑÏä§Î≥Ñ ÎèÖÎ¶Ω Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Í∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§\n";
              } else {
                reviewComment += "- ‚ö†Ô∏è **Í≤ÄÏÇ¨ Ïã§Ìå®** - Î¨∏Ï†ú Ìï¥Í≤∞ ÌõÑ Î∞∞Ìè¨ Í∞ÄÎä•\n";
                if (testResult !== 'success') {
                  reviewComment += "  - üß™ ÎπåÎìú/ÌÖåÏä§Ìä∏ Î¨∏Ï†ú Ìï¥Í≤∞ ÌïÑÏöî\n";
                }
                if (securityResult !== 'success') {
                  reviewComment += "  - üîí Î≥¥Ïïà Ïù¥Ïäà Ìï¥Í≤∞ ÌïÑÏöî\n";
                }
              }
              reviewComment += "- üìã ÏÉÅÏÑ∏ Î°úÍ∑∏Îäî Actions ÌÉ≠ÏóêÏÑú ÌôïÏù∏ Í∞ÄÎä•\n";

              // Spring Boot ÌäπÌôî Ï†ïÎ≥¥
              reviewComment += "\n### ‚òï Spring Boot ÏÑúÎπÑÏä§ Ï†ïÎ≥¥:\n";
              reviewComment += "- üóÑÔ∏è **Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§**: Í∞Å ÏÑúÎπÑÏä§Î≥Ñ ÎèÖÎ¶Ω PostgreSQL\n";
              reviewComment += "- üîê **Ïù∏Ï¶ù**: JWT Í∏∞Î∞ò Î≥¥Ïïà\n";
              reviewComment += "- üì® **Î©îÏãúÏßï**: Kafka Stream Ïó∞Îèô\n";
              reviewComment += "- üîß **ÏÑ§Ï†ï**: ProfileÎ≥Ñ ÌôòÍ≤Ω Î∂ÑÎ¶¨ (default/docker/production)\n";
              reviewComment += "- üìä **Î™®ÎãàÌÑ∞ÎßÅ**: Actuator Ìó¨Ïä§Ï≤¥ÌÅ¨ Ï†úÍ≥µ\n";

              // Í∏∞Ï°¥ ÏûêÎèô Î¶¨Î∑∞ ÏΩîÎ©òÌä∏Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÍ≥† ÏóÖÎç∞Ïù¥Ìä∏
              const { data: comments } = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('ü§ñ Smart BE Spring Boot ÏûêÎèô ÏΩîÎìú Î¶¨Î∑∞')
              );

              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: reviewComment
                });
                console.log('Updated existing Spring Boot review comment');
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: reviewComment
                });
                console.log('Created new Spring Boot review comment');
              }

            } catch (error) {
              console.error('Error creating Spring Boot review comment:', error);
              process.exit(0);
            }

  # Í∞Å ÏÑúÎπÑÏä§Î≥Ñ AKS Î∞∞Ìè¨
  deploy-to-aks:
    needs: [ detect-changes, build-and-push ]
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.services != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ env.AKS_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }}

      - name: Deploy Infrastructure (first service only)
        if: matrix.service == 'usermanagement'
        run: |
          echo "üèóÔ∏è Deploying infrastructure components for first service..."
          
          # 0) ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Î∂ÄÌÑ∞ Î®ºÏ†Ä Î≥¥Ïû• (Í∞ÄÏû• Ï§ëÏöî!)
          kubectl get ns smart-be >/dev/null 2>&1 || kubectl create ns smart-be
          
          # 1) Secrets ÏÉùÏÑ± (Ïù¥Ï†ú smart-beÍ∞Ä ÏûàÏúºÎØÄÎ°ú ÏÑ±Í≥µ)
          echo "üîê Creating Kubernetes secrets..."
          kubectl create secret generic postgres-secret \
            --from-literal=username=${{ secrets.POSTGRES_USERNAME }} \
            --from-literal=password=${{ secrets.POSTGRES_PASSWORD }} \
            -n smart-be \
            --dry-run=client -o yaml | kubectl apply -f -
          
          kubectl create secret generic app-secrets \
            --from-literal=jwt-secret=${{ secrets.JWT_SECRET }} \
            -n smart-be \
            --dry-run=client -o yaml | kubectl apply -f -
          
          echo "‚úÖ Secrets created successfully!"
          
          # 2) PostgreSQL Î∞∞Ìè¨ (Î™ÖÏãúÏ†ÅÏúºÎ°ú ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏßÄÏ†ï)
          kubectl apply -n smart-be -f kubernetes/postgres-statefulset.yml
          
          # 4) PostgreSQL Ï§ÄÎπÑ ÎåÄÍ∏∞
          echo "‚è≥ Waiting for PostgreSQL to be ready..."
          kubectl wait --for=condition=Ready pod -l app=postgres -n smart-be --timeout=300s      

          echo "‚úÖ Infrastructure deployment completed!"

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Deploy Spring Boot Service - ${{ matrix.service }}
        run: |
          echo "üöÄ Deploying ${{ matrix.service }} service..."
          
          # yqÎ°ú Ìï¥Îãπ ÏÑúÎπÑÏä§Îßå Ï†ïÌôïÌûà Ï∂îÏ∂úÌïòÍ≥† Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ ÏóÖÎç∞Ïù¥Ìä∏
          yq 'select(.kind=="Deployment" and .metadata.name=="${{ matrix.service }}") | (.spec.template.spec.containers[0].image |= sub("23acr.azurecr.io/smart-be-${{ matrix.service }}:latest", "${{ env.REGISTRY }}/smart-be-${{ matrix.service }}:${{ github.sha }}"))' \
            kubernetes/namespace.yml > temp-${{ matrix.service }}-deploy.yml
          
          yq 'select(.kind=="Service" and .metadata.name=="${{ matrix.service }}")' \
            kubernetes/namespace.yml > temp-${{ matrix.service }}-svc.yml
          
          # Î™ÖÏãúÏ†ÅÏúºÎ°ú ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏßÄÏ†ïÌïòÏó¨ Ï†ÅÏö©
          kubectl apply -n smart-be -f temp-${{ matrix.service }}-deploy.yml
          kubectl apply -n smart-be -f temp-${{ matrix.service }}-svc.yml
          
          # Î∞∞Ìè¨ ÏôÑÎ£å ÎåÄÍ∏∞
          echo "‚è≥ Waiting for ${{ matrix.service }} deployment to be ready..."
          kubectl rollout status deployment/${{ matrix.service }} -n smart-be --timeout=300s
          
          # ÏûÑÏãú ÌååÏùº Ï†ïÎ¶¨
          rm -f temp-${{ matrix.service }}-deploy.yml temp-${{ matrix.service }}-svc.yml

      - name: Verify Deployment - ${{ matrix.service }}
        run: |
          echo "üîç Verifying ${{ matrix.service }} deployment..."
          
          # Get pod status
          POD_STATUS=$(kubectl get pods -n smart-be -l app=${{ matrix.service }} -o jsonpath='{.items[0].status.phase}' 2>/dev/null || echo "NotFound")
          echo "Pod Status: $POD_STATUS"
          
          # Get service info
          kubectl get service ${{ matrix.service }} -n smart-be || echo "Service not found"
          
          # Check logs if pod is not running
          if [ "$POD_STATUS" != "Running" ]; then
            echo "‚ùå Pod is not running. Checking logs..."
            kubectl logs -l app=${{ matrix.service }} -n smart-be --tail=50 || echo "No logs available"
            kubectl describe pod -l app=${{ matrix.service }} -n smart-be || echo "No pods found"
          else
            echo "‚úÖ ${{ matrix.service }} is running successfully!"
          
            # Try to get service endpoint (if available)
            EXTERNAL_IP=$(kubectl get service ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
            if [ "$EXTERNAL_IP" != "pending" ] && [ ! -z "$EXTERNAL_IP" ]; then
              echo "üåê Service might be accessible at: http://$EXTERNAL_IP/actuator/health"
            else
              echo "üí° Use kubectl port-forward to test: kubectl port-forward -n smart-be svc/${{ matrix.service }} 8080:8080"
            fi
          fi